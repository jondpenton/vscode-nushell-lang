{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "nushell",
    "scopeName": "source.nushell",
    "patterns": [
        { "include": "#define-variable" },
        { "include": "#define-alias" },
        { "include": "#function" },
        { "include": "#extern" },
        { "include": "#module" },
        { "include": "#use-module" },
        { "include": "#expression" },
        { "include": "#comment" }
    ],
    "repository": {
        "string": {
            "patterns": [
                { "include": "#string-single-quote" },
                { "include": "#string-backtick" },
                { "include": "#string-double-quote" },
                { "include": "#string-interpolated-double" },
                { "include": "#string-interpolated-single" },
                { "include": "#string-bare" }
            ]
        },
        "string-escape": {
            "match": "\\\\(?:[bfrnt\\\\'\"/]|u[0-9a-fA-F]{4})",
            "name": "constant.character.escape.nushell"
        },
        "string-bare": {
            "match": "[^$\\[{(\"',|#\\s|][^\\[\\]{}()\"'\\s#,|]*",
            "name": "string.bare.nushell"
        },
        "string-single-quote": {
            "begin": "'",
            "beginCaptures": {
				"0": { "name": "punctuation.definition.string.begin.nushell" }
			},
            "end": "'",
            "endCaptures": {
				"0": { "name": "punctuation.definition.string.end.nushell" }
			},
            "name": "string.quoted.single.nushell"
        },
        "string-backtick": {
            "begin": "`",
            "beginCaptures": {
				"0": { "name": "punctuation.definition.string.begin.nushell" }
			},
            "end": "`",
            "endCaptures": {
				"0": { "name": "punctuation.definition.string.end.nushell" }
			},
            "name": "string.quoted.single.nushell"
        },
        "string-double-quote": {
            "begin": "\"",
            "beginCaptures": {
				"0": { "name": "punctuation.definition.string.begin.nushell" }
			},
            "end": "\"",
            "endCaptures": {
				"0": { "name": "punctuation.definition.string.end.nushell" }
			},
            "name": "string.quoted.double.nushell",
            "patterns": [
                {
                    "match": "\\w+"
                },
                {"include": "#string-escape"}
            ]
        },
        "string-interpolated-double": {
            "begin": "\\$\"",
            "beginCaptures": {
				"0": { "name": "punctuation.definition.string.begin.nushell" }
			},
            "end": "\"",
            "endCaptures": {
				"0": { "name": "punctuation.definition.string.end.nushell" }
			},
            "name": "string.interpolated.double.nushell",
            "patterns": [
                {
                    "match": "\\\\[()]",
                    "name": "constant.character.escape.nushell"
                },
                {"include": "#string-escape"},
                {"include": "#paren-expression"}
            ]
        },
        "string-interpolated-single": {
            "begin": "\\$'",
            "beginCaptures": {
				"0": { "name": "punctuation.definition.string.begin.nushell" }
			},
            "end": "'",
            "endCaptures": {
				"0": { "name": "punctuation.definition.string.end.nushell" }
			},
            "name": "string.interpolated.single.nushell",
            "patterns": [
                {"include": "#paren-expression"}
            ]
        },
        "control-keywords" : {
            "comment": "Regex generated with list-to-tree (https://github.com/glcraft/list-to-tree)",
            "match": "(?<![0-9a-zA-Z_\\-.\\/:\\\\])(?:break|continue|else(?: if)?|for|if|loop|mut|return|try|while)(?![0-9a-zA-Z_\\-.\\/:\\\\])",
            "name": "keyword.control.nushell"
        },
        "comment": {
          "match": "(#.*)$",
          "name": "comment.nushell"
        },
        "keyword": {
            "match": "(?:def(?:-env)?)",
            "name": "keyword.other.nushell"
        },
        "parameters": {
            "match": "\\b-{1,2}[\\w-]*",
            "name":"variable.parameter.nushell"
        },
        "variables": {
            "match": "(\\$[a-zA-Z0-9_]+)",
            "captures": {
                "1": {
                    "patterns": [
                        { "include": "#internal-variables" },
                        { 
                            "match": "\\$.+",
                            "name": "variable.other.nushell" 
                        }
                    ]
                }
            }
        },
        "variable-fields": {
            "match" : "(?<=\\)|\\}|\\]|\\$\\w+)(?:\\.(?:[\\w-]+|\"[\\w\\- ]+\"))+",
            "name": "variable.other.nushell"
        },
        "internal-variables": {
            "match": "\\$(?:nu|env)\\b",
            "name":"variable.language.nushell"
        },
        "datetime": {
            "match": "\\b\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{1,3})?(?:\\+\\d{2}:?\\d{2}|Z)?)?\\b",
            "name": "constant.numeric.nushell"
        },
        "numbers-hexa": {
            "match": "(?<![\\w-])0x[0-9a-fA-F]+(?![\\w.])",
            "name": "constant.numeric.nushell"
        },
        "numbers": {
            "match": "(?<![\\w-])[-+]?(?:_?\\d_?)+(?:\\.(?:_?\\d_?)*)?(?:(?![\\w.])|(?=\\.\\.))",
            "name": "constant.numeric.nushell"
        },
        "durations": {
            "match": "(?<![\\w-])[-+]?\\d+(?:\\.\\d*)?(?i:ns|us|ms|sec|min|hr|day|wk|b|kb|mb|gb|tb|pt|eb|zb|kib|mib|gib|tib|pit|eib|zib)(?:(?!\\.\\.))",
            "name": "constant.numeric.nushell"
        },
        "binary": {
            "begin": "\\b(0x)(\\[)",
            "beginCaptures": {
                "1": { "name": "constant.numeric.nushell" },
                "2": { "name": "meta.brace.square.begin.nushell" }
            },
            "end": "\\]",
            "endCaptures": {
                "0": { "name": "meta.brace.square.begin.nushell" }
            },
            "name": "constant.binary.nushell",
            "patterns": [
                { "match": "[0-9a-fA-F]{2}", "name": "constant.numeric.nushell" }
            ]
        },
        "constant-keywords": {
            "match": "\\b(?:true|false|null)\\b",
            "name": "constant.language.nushell"
        },
        "constant-value": {
            "patterns": [
                { "include": "#constant-keywords" },
                { "include": "#durations" },
                { "include": "#numbers" },
                { "include": "#numbers-hexa" },
                { "include": "#datetime" },
                { "include": "#binary" }
            ]
        },
        "ranges": {
            "match": "\\.\\.<?|:",
            "name": "keyword.control.nushell"
        },
        "operators-word": {
            "match": "(?<= |\\()(?:mod|in|not-in|not|and|or|xor|bit-or|bit-and|bit-xor|bit-shl|bit-shr|starts-with|ends-with)(?= |\\)|$)",
            "name": "keyword.control.nushell"
        },
        "operators-symbols": {
            "match": "(?<= )(?:\\+|\\-|\\*|\\/|\\/\\/|\\*\\*|!=|[<>=]=?|[!=]~|&&|\\|\\||\\||\\+\\+=?)(?= |$)",
            "name": "keyword.control.nushell"
        },
        "operators": {
            "patterns": [
                { "include": "#operators-word" },
                { "include": "#operators-symbols" },
                { "include": "#ranges" }
            ]
        },
        "table": {
            "begin": "\\[",
            "beginCaptures": {
                "0": { "name": "meta.brace.square.begin.nushell" }
            },
            "end": "\\]",
            "endCaptures": {
                "0": { "name": "meta.brace.square.end.nushell" }
            },
            "name": "meta.table.nushell",
            "patterns": [
                { "include": "#value" },
                {
                    "match": ",",
                    "name": "punctuation.separator.nushell"
                },
                { "include": "#comment" }
            ]
        },
        "function-parameter-default-value": {
            "begin": "=\\s*",
            "captures": {
                "1": { "name": "variable.parameter.nushell" },
                "2": { "name": "variable.parameter.nushell" },
                "3": { "name": "keyword.operator.nushell" },
                "4": { "name": "entity.name.type.nushell" }
            },
            "end": "(?=\\])|,|$",
            "patterns": [
                { "include": "#value" }
            ]
        },
        "function-parameter-declare": {
            "match": "(-{0,2}[\\w-]+|\\.{3})(?:\\((-[\\w?])\\))?(?:\\s*(\\??:)\\s*(\\w+)(?:@((?:\"[^\"]+\")|(?:'[^']+')))?)?",
            "captures": {
                "1": { "name": "variable.parameter.nushell" },
                "2": { "name": "variable.parameter.nushell" },
                "3": { "name": "keyword.operator.nushell" },
                "4": { "name": "entity.name.type.nushell" },
                "5": { "name": "string.quoted.nushell" }
            }
        },
        "function-parameter": {
            "patterns": [
                { "include": "#function-parameter-declare" },
                { "include": "#function-parameter-default-value" }
            ]
        },
        "function-parameters": {
            "begin": "\\[",
            "beginCaptures": {
                "0": { "name": "meta.brace.square.begin.nushell" }
            },
            "end": "\\]",
            "endCaptures": {
                "0": { "name": "meta.brace.square.end.nushell" }
            },
            "patterns": [
                { "include": "#function-parameter" },
                { "include": "#comment" }

            ],
            "name": "meta.function.parameters.nushell"
        },
        "define-function": {
            "match": "((?:export\\s+)?def(?:-env)?)\\s+([\\w\\-!]+|\"[\\w\\-! ]+\")",
            "captures": {
                "1": { "name": "entity.name.function.nushell" },
                "2": { "name": "entity.name.type.nushell" }
            }
        },
        "define-extern": {
            "match": "((?:export\\s+)?extern)\\s+([\\w\\-!]+|\"[\\w\\-! ]+\")",
            "captures": {
                "1": { "name": "entity.name.function.nushell" },
                "2": { "name": "entity.name.type.nushell" }
            }
        },
        "function-body": {
            "begin": "\\{",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.function.begin.nushell" }
            },
            "end": "\\}",
            "endCaptures": {
                "0": { "name": "punctuation.definition.function.end.nushell" }
            },
            "name": "meta.function.body.nushell",
            "patterns": [
                { "include": "source.nushell" }
            ]
        },
        "function": {
            "begin": "((?:export\\s+)?def(?:-env)?)\\s+([\\w\\-]+|\"[\\w\\- ]+\")",
            "beginCaptures": {
                "0": { 
                    "patterns": [
                        { "include": "#define-function" },
                        { "include": "#define-extern" }
                    ] 
                }
            },
            "end": "(?<=\\})",
            "endCaptures": {
                "0": { "name": "punctuation.definition.function.end.nushell" }
            },
            "patterns": [
                { "include": "#function-parameters" },
                { "include": "#function-body" }
            ]
        },
        "extern": {
            "begin": "((?:export\\s+)?extern)\\s+([\\w\\-]+|\"[\\w\\- ]+\")",
            "beginCaptures": {
                "0": { 
                    "patterns": [
                        { "include": "#define-extern" }
                    ] 
                }
            },
            "end": "(?<=\\])",
            "endCaptures": {
                "0": { "name": "punctuation.definition.function.end.nushell" }
            },
            "patterns": [
                { "include": "#function-parameters" }
            ]
        },
        "module": {
            "begin": "(module)\\s+([\\w\\-]+)\\s*\\{",
            "beginCaptures": {
                "1": { "name": "entity.name.function.nushell" },
                "2": { "name": "entity.name.namespace.nushell" }
            },
            "end": "\\}",
            "endCaptures": {
                "0": { "name": "punctuation.definition.module.end.nushell" }
            },
            "name": "meta.module.nushell",
            "patterns": [
                { "include": "source.nushell" }
            ]
        },
        "use-module": {
            "match": "((?:export )?use)\\s+([\\w\\-]+)(?:\\s+([\\w\\-]+|\"[\\w\\- ]+\"|\\*))?;?",
            "captures": {
                "1": { "name": "entity.name.function.nushell" },
                "2": { "name": "entity.name.namespace.nushell" },
                "3": { "name": "keyword.other.nushell" }
            }
        },
        "for-loop": {
            "begin": "(for)\\s+(\\$?\\w+)\\s+(in)\\s+(.+)\\s*(\\{)",
            "beginCaptures": {
                "1": { "name": "keyword.other.nushell" },
                "2": { "name": "variable.other.nushell" },
                "3": { "name": "keyword.other.nushell" },
                "4": { "patterns": [{"include": "#value"}] },
                "5": { "name": "punctuation.section.block.begin.bracket.curly.nushell" }
            },
            "end": "\\}",
            "endCaptures": {
                "0": { "name": "punctuation.section.block.end.bracket.curly.nushell" }
            },
            "name": "meta.for-loop.nushell",
            "patterns": [
                { "include": "source.nushell" }
            ]
        },
        "paren-expression": {
            "begin": "\\(",
            "beginCaptures": {
				"0": { "name": "meta.brace.round.begin.nushell" }
			},
            "end": "\\)",
            "endCaptures": {
				"0": { "name": "meta.brace.round.end.nushell" }
			},
            "name": "meta.expression.parenthesis.nushell",
            "patterns": [
                { "include": "#expression" }
            ]
        },
        "braced-expression": {
            "begin": "(\\{)(?:\\s*\\|([\\w, ]*)\\|)?",
            "beginCaptures": {
				"1": { "name": "punctuation.section.block.begin.bracket.curly.nushell" },
                "2": { 
                    "patterns": [
                        { "include": "#function-parameter" },
                        {
                            "match": ",",
                            "name": "punctuation.separator.nushell"
                        }
                    ]
                 }
			},
            "end": "\\}",
            "endCaptures": {
				"0": { "name": "punctuation.section.block.end.bracket.curly.nushell" }
			},
            "name": "meta.expression.braced.nushell",
            "patterns": [
                { 
                    "begin": "((?:(?:[^$\\(\\{\\[\"'#\\s][^\\(\\{\\[\"'#\\s]*)|\\$?(?:\"[^\"]+\"|'[^']+')))\\s*(:)\\s*",
                    "beginCaptures": {
                        "1": { 
                            "name": "variable.other.nushell",
                            "patterns": [
                                { "include": "#paren-expression" }
                            ]
                        },
                        "2": { "patterns": [{"include": "#operators"}] }
                    },
                    "end": "(?=,|\\s|\\})",
                    "name": "meta.record-entry.nushell",
                    "patterns": [
                        { "include": "#value" }
                    ]
                },
                { "include": "source.nushell" }
            ]
        },
        "define-variable": {
            "match": "(let(?:-env)?|mut|const)\\s+(\\w+)\\s*(=)",
            "captures": {
                "1": { "name": "keyword.other.nushell" },
                "2": { "name": "variable.other.nushell" },
                "3": { 
                    "patterns": [
                        { "include": "#operators" }
                    ] 
                }
            }
        },
        "define-alias": {
            "match": "((?:export )?alias)\\s+([\\w\\-!]+)\\s*(=)",
            "captures": {
                "1": { "name": "entity.name.function.nushell" },
                "2": { "name": "entity.name.type.nushell" },
                "3": { 
                    "patterns": [
                        { "include": "#operators" }
                    ] 
                }
            }
        },
        "pre-command": {
            "begin": "(\\w+)(=)",
            "beginCaptures": {
                "1": { "name": "variable.other.nushell" },
                "2": { 
                    "patterns": [
                        { "include": "#operators" }
                    ] 
                }
            },
            "end": "(?=\\s+)",
            "patterns": [
                { "include": "#value" }
            ]
        },

        "command": {
            "begin": "(?<!\\w)(?:(\\^)|(?![0-9]|(?<=\\)|\\}|\\]|\\$\\w+)\\.))([\\w.!]+(?:(?: (?!-)[\\w\\-.!]+(?:(?= |\\))|$)|[\\w\\-.!]+))*|(?<=\\^)\\$?(?:\"[^\"]+\"|'[^']+'))",
            "beginCaptures": {
                "1": { "name": "keyword.operator.nushell" },
                "2": { 
                    "patterns": [
                        { "include": "#control-keywords" },
                        {
                            "match": "(?:ansi|char) \\w+",
                            "captures": {
                                "0": { "name": "keyword.other.builtin.nushell" }
                            }
                        },
                        { 
                            "comment": "Regex generated with list-to-tree (https://github.com/glcraft/list-to-tree)",
                            "match": "(a(?:l(?:ias|l)|n(?:si(?: (?:gradient|strip))?|y)|ppend|st)|b(?:enchmark|its(?: (?:and|not|or|ro(?:l|r)|sh(?:l|r)|xor))?|ytes(?: (?:a(?:dd|t)|build|collect|ends-with|index-of|length|re(?:move|place|verse)|starts-with))?)|c(?:al|d|har|lear|o(?:l(?:lect|umns)|m(?:mandline|p(?:act|lete))|nfig(?: (?:env|nu|reset))?)|p|ustom-value (?:generate(?:2)?|update))|d(?:ate(?: (?:format|humanize|list-timezone|now|to-(?:record|t(?:able|imezone))))?|e(?:bug|code(?: base64)?|f(?:-env|ault)?|scribe|tect columns)|o|rop(?: (?:column|nth))?|u)|e(?:ach(?: while)?|cho|n(?:code(?: base64)?|ter|v)|rror make|very|x(?:it|port(?: (?:alias|def(?:-env)?|extern|use)|-env)?|tern ))|f(?:etch|i(?:nd|rst)|latten|mt|ormat(?: filesize)?|rom(?: (?:csv|eml|i(?:cs|ni)|json|nuon|ods|ssv|t(?:oml|sv)|url|vcf|x(?:lsx|ml)|y(?:aml|ml)))?)|g(?:et|lob|r(?:id|oup(?:-by)?)|stat)?|h(?:ash(?: (?:base64|md5|sha256))?|e(?:aders|lp(?: operators)?)|i(?:de(?:-env)?|sto(?:gram|ry(?: session)?)))|i(?:gnore|n(?:c|put|sert|to(?: (?:b(?:inary|ool)|d(?:atetime|ecimal|uration)|filesize|int|record|s(?:qlite|tring)))?)|s-(?:admin|empty))|k(?:eybindings(?: (?:default|list(?:en)?))?|ill)|l(?:ast|e(?:ngth|t(?:-env)?)|ines|oad-env|s)|m(?:ath(?: (?:a(?:bs|vg)|ceil|eval|floor|m(?:ax|edian|in|ode)|product|round|s(?:qrt|tddev|um)|variance))?|e(?:rge|tadata)|kdir|o(?:dule|ve)|ut|v)|n(?:u-(?:check|example-(?:1|2|3)|highlight))?|o(?:pen|verlay(?: (?:hide|list|new|use))?)|p(?:a(?:r(?:-each|se)|th(?: (?:basename|dirname|ex(?:ists|pand)|join|parse|relative-to|split|type))?)|o(?:rt|st)|r(?:epend|int)|s)?|query(?: (?:db|json|web|xml))?|r(?:an(?:dom(?: (?:bool|chars|d(?:ecimal|ice)|integer|uuid))?|ge)|e(?:duce|gist(?:er|ry query)|ject|name|verse)|m|o(?:ll(?: (?:down|left|right|up))?|tate)|un-external)|s(?:ave|chema|e(?:lect|q(?: (?:char|date))?)|h(?:ells|uffle)|ize|kip(?: (?:until|while))?|leep|o(?:rt(?:-by)?|urce(?:-env)?)|plit(?: (?:c(?:hars|olumn)|list|row|words)|-by)?|tr(?: (?:c(?:a(?:mel-case|pitalize)|o(?:llect|ntains))|d(?:istance|owncase)|ends-with|find-replace|index-of|join|kebab-case|l(?:ength|pad)|pascal-case|r(?:e(?:place|verse)|pad)|s(?:creaming-snake-case|nake-case|tarts-with|ubstring)|t(?:itle-case|o-(?:d(?:atetime|ecimal)|int)|rim)|upcase))?|ys)|t(?:a(?:ble|ke(?: (?:until|while))?)|erm size|o(?: (?:csv|html|json|md|nuon|t(?:ext|oml|sv)|url|xml|yaml)|uch)?|ranspose|utor)|u(?:niq|p(?:date(?: cells)?|sert)|rl(?: parse)?|se)|v(?:ersion|iew-source)|w(?:atch|h(?:ere|ich)|i(?:ndow|th-env)|rap)|zip)(?![\\w-])( (.*))?",
                            "captures": {
                                "1": { "name": "keyword.other.builtin.nushell" },
                                "2": { 
                                    "patterns": [
                                        { "include": "#value" }
                                    ]
                                }
                            }
                        },
                        { 
                            "match": "(?<=\\^)(?:\\$(\"[^\"]+\"|'[^']+')|\"[^\"]+\"|'[^']+')",
                            "name": "entity.name.type.external.nushell",
                            "captures": {
                                "1": { 
                                    "patterns": [
                                        { "include": "#paren-expression" }
                                    ] 
                                }
                            }
                        },
                        {
                            "match": "([\\w.]+(?:-[\\w.!]+)*)(?: (.*))?",
                            "captures": {
                                "1": { "name": "entity.name.type.external.nushell" },
                                "2": { 
                                    "patterns": [
                                        { "include": "#value" }
                                    ]
                                }
                            }
                        },
                        { "include": "#value" }
                    ]
                    
                }
            },
            "end": "(?=\\||\\)|\\}|;)|$",
            "name": "meta.command.nushell",
            "patterns": [
                { "include": "#value" }
            ]
        },
        "expression": {
            "patterns": [
                { "include": "#pre-command" },
                { "include": "#for-loop" },
                { "include": "#operators" },
                { "include": "#control-keywords" },
                { "include": "#constant-value" },
                { "include": "#command" },
                { "include": "#value" }
            ]
        },
        "value": {
            "patterns": [
                { "include": "#variables" },
                { "include": "#variable-fields" },
                { "include": "#control-keywords" },
                { "include": "#constant-value" },
                { "include": "#table" },
                { "include": "#parameters" },
                { "include": "#operators" },
                { "include": "#paren-expression" },
                { "include": "#braced-expression" },
                { "include": "#string" },
                { "include": "#comment" }
            ]
        }
    }
}